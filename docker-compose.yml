services:
  ###
  # Services
  ###
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - aignostic_network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 5

  ###
  # Frontend services
  ###
  frontend:
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.frontend
    container_name: frontend
    volumes:
      - .:/app
      - venv:/app/.venv
    command: npx nx serve frontend --host 0.0.0.0
    ports:
      - '4200:4200'
    networks:
      - aignostic_network

  ###
  # Backend services
  ###
  # Api Router
  backend:
    container_name: backend
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.python.dev
      args:
        DEPGROUP: main
        TARGET_PACKAGE: api
    volumes:
      - .:/app
      - venv:/app/.venv
    command: poetry run uvicorn main:app --host 0.0.0.0 --reload
    working_dir: /app/packages/api
    ports:
      - '8000:8000'
    networks:
      - aignostic_network
    environment:
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
    links:
      - rabbitmq

  # Microservices
  worker_ms:
    container_name: worker
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.python.dev
      args:
        DEPGROUP: main
        TARGET_PACKAGE: worker
    volumes:
      - .:/app
      - venv:/app/.venv
    command: poetry run python -m worker.worker
    working_dir: /app/packages/worker
    networks:
      - aignostic_network
    environment:
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
    links:
      - rabbitmq
  aggregator_ms:
    container_name: aggregator
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.python.dev
      args:
        DEPGROUP: main
        TARGET_PACKAGE: aggregator
    volumes:
      - .:/app
      - venv:/app/.venv
    command: poetry run uvicorn aggregator.aggregator:aggregator_app --host 0.0.0.0 --reload
    working_dir: /app/packages/aggregator
    ports:
      - '5002:5002'
    networks:
      - aignostic_network
    environment:
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
    links:
      - rabbitmq

  ####
  # Mock servers to test against
  ####

  mock_dataset_api:
    container_name: mock-dataset-api
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.python.dev
      args:
        DEPGROUP: main,dataset
        TARGET_PACKAGE: api
    volumes:
      - .:/app
      - venv:/app/.venv
    command: poetry run python3 -u -m tests.utils.dataset.mock_server --host 0.0.0.0 --reload
    working_dir: /app/packages/api
    ports:
      - '5000:5000'

  mock_model_api:
    container_name: mock-model-api
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.python.dev
      args:
        DEPGROUP: main,model
        TARGET_PACKAGE: api
    volumes:
      - .:/app
      - venv:/app/.venv
    command: poetry run python3 -u -m tests.utils.model.scikit_mock --host 0.0.0.0 --reload
    working_dir: /app/packages/api
    ports:
      - '5001:5001'

volumes:
  venv:
networks:
  aignostic_network:
