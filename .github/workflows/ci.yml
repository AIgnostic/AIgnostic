# Made from a combination of past projecs, namely:
# - https://github.com/imperial/cpp-connect/
# -

name: CI & CD

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: write
  checks: write
  issues: write
  packages: write
  pull-requests: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: aignostic/aignostic
  IMPAAS_APP_NAME: aignostic

jobs:
  lint:
    uses: ./.github/workflows/nx-run.yml
    with:
      run_poetry_install: true
      nx_tasks: 'affected -t lint'
      artifact_name: 'lint-reports'
      artifact_path: 'dist/'
    secrets: inherit
  test:
    uses: ./.github/workflows/nx-run.yml
    with:
      run_poetry_install: true
      # nx_tasks: ${{ github.ref == 'refs/heads/main' && 'run-many -t test --all --parallel=5' || 'affected -t test' }}
      nx_tasks: ${{ true && 'run-many -t test --all --parallel=5' || 'affected -t test' }}
      artifact_name: 'test-coverage'
      artifact_path: 'coverage/'
    secrets: inherit
  build:
    uses: ./.github/workflows/nx-run.yml
    with:
      run_poetry_install: true
      nx_tasks: 'affected -t build'
      artifact_name: 'build-artifact'
      artifact_path: 'dist/'
    secrets: inherit

  docker-base:
    # Note that docker base strictly speaking doesn't matter if it is pushed
    # when the rest of the build failed as not used in prod
    # so we can save a bit of time by doing it whilst lint/test/etc run
    # Build base image first to enable caching
    uses: ./.github/workflows/docker.yml
    with:
      image_tag: 'python-prod-base'
      build_target: 'python-prod-base'
      push_image: false # since really want we want is build cache
    secrets: inherit

  docker-aggregator:
    uses: ./.github/workflows/docker.yml
    needs:
      - docker-base
      - lint
      - test
      - build
    with:
      image_tag: 'aggregator'
      build_target: 'aggregator'
    secrets: inherit

  docker-api:
    uses: ./.github/workflows/docker.yml
    needs:
      - docker-base
      - lint
      - test
      - build
    with:
      image_tag: 'api'
      build_target: 'api'
    secrets: inherit

  docker-worker:
    uses: ./.github/workflows/docker.yml
    needs:
      - docker-base
      - lint
      - test
      - build
    with:
      image_tag: 'worker'
      build_target: 'worker'
    secrets: inherit

  docker-mocks:
    uses: ./.github/workflows/docker.yml
    needs:
      - docker-base
      - lint
      - test
      - build
    with:
      image_tag: 'mocks'
      build_target: 'mocks'
    secrets: inherit

  docker-dispatcher:
    uses: ./.github/workflows/docker.yml
    needs:
      - docker-base
      - lint
      - test
      - build
    with:
      image_tag: 'dispatcher'
      build_target: 'dispatcher'
    secrets: inherit

  docker-user-metrics:
    uses: ./.github/workflows/docker.yml
    needs:
      - docker-base
      - lint
      - test
      - build
    with:
      image_tag: 'user_added_metrics'
      build_target: 'user_added_metrics'
    secrets: inherit

  # Build nginx reverse proxy
  docker-nginx:
    # Build base image first to enable caching
    uses: ./.github/workflows/docker.yml
    with:
      image_tag: 'nginx_reverse_proxy'
      build_target: 'nginx_reverse_proxy'
    secrets: inherit

  deploy-docker-stack:
    # UNCOMMENT IT ALL BELOW
    needs:
      - docker-api # if we didn't build a container, don't do this!
      - docker-worker
      - docker-aggregator
      - docker-dispatcher
      - docker-nginx
      - docker-user-metrics
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      DOCKER_HOST: ssh://aignostic@aignostic
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.SERVER_DOCKER_USERNAME }}
          password: ${{ secrets.SERVER_DOCKER_PASSWORD }}
      - name: Make SSH Directory
        run: mkdir -p ~/.ssh
      - name: Commit SSH Key
        run: |
          touch ~/.ssh/id_ecdsa
          chmod 600 ~/.ssh/id_ecdsa
          echo "${{ secrets.DIGITAL_OCEAN_PRIVATE_KEY }}" > ~/.ssh/id_ecdsa
      - name: Commit SSH Config
        run: |
          echo "Host aignostic" > ~/.ssh/config
          echo "   HostName ${{ secrets.DIGITAL_OCEAN_HOST }}" >> ~/.ssh/config
          echo "   User aignostic" >> ~/.ssh/config
          echo "   IdentityFile ~/.ssh/id_ecdsa" >> ~/.ssh/config
      - name: Add SSH Known Hosts
        run: ssh-keyscan -H ${{ secrets.DIGITAL_OCEAN_HOST }} >> ~/.ssh/known_hosts
      - name: Wait for SSH to work
        run: ssh aignostic@aignostic "echo 'Hello from the other side'"
      - name: Deploy Stack
        run: docker stack deploy --with-registry-auth -c ./swarm/app.docker-compose.yml aignostic

  deploy-docker-mocks:
    # UNCOMMENT IT ALL BELOW
    needs:
      - docker-mocks
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      DOCKER_HOST: ssh://aignostic@aignostic
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.SERVER_DOCKER_USERNAME }}
          password: ${{ secrets.SERVER_DOCKER_PASSWORD }}
      - name: Make SSH Directory
        run: mkdir -p ~/.ssh
      - name: Commit SSH Key
        run: |
          touch ~/.ssh/id_ecdsa
          chmod 600 ~/.ssh/id_ecdsa
          echo "${{ secrets.DIGITAL_OCEAN_PRIVATE_KEY }}" > ~/.ssh/id_ecdsa
      - name: Commit SSH Config
        run: |
          echo "Host aignostic" > ~/.ssh/config
          echo "   HostName ${{ secrets.DIGITAL_OCEAN_HOST }}" >> ~/.ssh/config
          echo "   User aignostic" >> ~/.ssh/config
          echo "   IdentityFile ~/.ssh/id_ecdsa" >> ~/.ssh/config
      - name: Add SSH Known Hosts
        run: ssh-keyscan -H ${{ secrets.DIGITAL_OCEAN_HOST }} >> ~/.ssh/known_hosts
      - name: Wait for SSH to work
        run: ssh aignostic@aignostic "echo 'Hello from the other side'"
      - name: Deploy Stack
        run: docker stack deploy --with-registry-auth -c ./swarm/mocks.docker-compose.yml aignostic-mocks

  deploy-gh-pages:
    needs:
      - lint
      - test
      - build
    # from https://github.com/JamesIves/github-pages-deploy-action
    concurrency: ci-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession.
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    # From https://github.com/actions/deploy-pages
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      contents: write
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install dependencies
        run: npm ci
      - name: Build the app
        run: npx nx build frontend
      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: dist/frontend # The folder the action should deploy.
