# Made from a combination of past projecs, namely:
# - https://github.com/imperial/cpp-connect/
# -

name: CI & CD

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: write
  checks: write
  issues: write
  packages: write
  pull-requests: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: aignostic/aignostic
  IMPAAS_APP_NAME: aignostic

jobs:
  install: # Mass install all dependencies -> should mean later stages read from cache & if install fails we get one failing job
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Poetry before Python because https://github.com/actions/setup-python/issues/765
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Set up Python 3.12 with Poetry
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'poetry'

      - name: Inject export plugin (required by NX)
        run: poetry self add poetry-plugin-export

      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      # Uncomment this line to enable task distribution
      # - run: npx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      # Insall npm deps so NX works
      - run: npm ci --legacy-peer-deps
      - uses: nrwl/nx-set-shas@v4

      - name: Install dependencies using poetry at root
        run: poetry install -v
      - name: Install per project dev dependencies
        run: poetry run npx nx run-many -t install --all --parallel 1

  lint:
    needs:
      - install
    uses: ./.github/workflows/nx-run.yml
    with:
      run_poetry_install: true
      nx_tasks: 'affected -t lint'
      artifact_name: 'lint-reports'
      artifact_path: 'dist/'
    secrets: inherit
  test:
    needs:
      - install
    uses: ./.github/workflows/nx-run.yml
    with:
      run_poetry_install: true
      nx_tasks: 'affected -t test'
      artifact_name: 'test-coverage'
      artifact_path: 'coverage/'
    secrets: inherit
  build:
    needs:
      - install
    uses: ./.github/workflows/nx-run.yml
    with:
      run_poetry_install: true
      nx_tasks: 'affected -t build'
      artifact_name: 'build-artifact'
      artifact_path: 'dist/'
    secrets: inherit

  docker-base:
    # Build base image first to enable caching
    uses: ./.github/workflows/docker.yml
    needs:
      - lint
      - test
      - build
    with:
      image_tag: 'python-prod-base'
      build_target: 'python-prod-base'
    secrets: inherit

  docker-aggregator:
    # Build base image first to enable caching
    uses: ./.github/workflows/docker.yml
    needs:
      - docker-base
    with:
      image_tag: 'aggregator'
      build_target: 'aggregator'
    secrets: inherit

  docker-api:
    # Build base image first to enable caching
    uses: ./.github/workflows/docker.yml
    needs:
      - docker-base
    with:
      image_tag: 'api'
      build_target: 'api'
    secrets: inherit

  docker-worker:
    # Build base image first to enable caching
    uses: ./.github/workflows/docker.yml
    needs:
      - docker-base
    with:
      image_tag: 'worker'
      build_target: 'worker'
    secrets: inherit

  deploy-docker-stack:
    # needs:
    #   - docker-api # if we didn't build a container, don't do this!
    #   - docker-worker
    #   - docker-aggregator
    # if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # - name: Deploy Services
      #   uses: kitconcept/docker-stack-deploy@v1.0.1
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      #     remote_host: ${{ secrets.DIGITAL_OCEAN_HOST }}
      #     remote_user: ${{ secrets.DIGITAL_OCEAN_USER }}
      #     remote_private_key: ${{ secrets.DIGITAL_OCEAN_PRIVATE_KEY }}
      #     stack_file: './swarm/services.docker-compose.yml'
      #     stack_name: 'aignostic'
      - name: Deploy Apps
        uses: kitconcept/docker-stack-deploy@v1.0.1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          remote_host: ${{ secrets.DIGITAL_OCEAN_HOST }}
          remote_user: ${{ secrets.DIGITAL_OCEAN_USER }}
          remote_private_key: ${{ secrets.DIGITAL_OCEAN_PRIVATE_KEY }}
          stack_file: './swarm/app.docker-compose.yml'
          stack_name: 'aignostic'
  deploy-gh-pages:
    needs:
      - lint
      - test
      - build
    # from https://github.com/JamesIves/github-pages-deploy-action
    concurrency: ci-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession.
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    # From https://github.com/actions/deploy-pages
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      contents: write
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install dependencies
        run: npm ci
      - name: Build the app
        run: npx nx build frontend
      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: dist/frontend # The folder the action should deploy.
