on:
  workflow_call:
    inputs:
      image_tag:
        description: 'Docker image tag to build, appended after ghcr.io/aignostic'
        required: true
        type: string
      build_target:
        description: 'Docker build target from a multi stage build'
        required: true
        type: string
      dockerfile:
        description: 'Dockerfile to use for building the image'
        required: false
        type: string
        default: './dockerfiles/Dockerfile.python'

env:
  REGISTRY: ghcr.io

jobs:
  build_docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Setup the tags for the docker image
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/aignostic/${{ inputs.image_tag }}
          # What the tags mean:
          # 1. Tag docker image with the branch name
          # 2. Tag docker image wth the Git tag name if present
          # 3. Tag docker image with the PR number e.g. pr-1
          # 4. Tag docker image with the commit SHA
          # 5. Tag docker image with 'latest' if it's the default branch (main)
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
      # Build tags with the tags we setup in the previous step
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./packages/api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # no-cache: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: ${{ inputs.build_target }}
